/*

 Project Euler #12

 The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
 Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
 10: 1,2,5,10
 15: 1,3,5,15
 21: 1,3,7,21
 28: 1,2,4,7,14,28
 We can see that 28 is the first triangle number to have over five divisors.
 What is the value of the first triangle number to have over five hundred divisors?

 */


function factorial(n){
    if(n === 1) return 1;
    if(n===0) return 1;
    return n*factorial(n-1);
}

function getTriangleNumberN(n){
    if(n===0 || n===1) return n;
    return n +  getTriangleNumberN(n-1);
}

function countCombinations(n,r){
    // C(n,r) = n!/r!(n-r)!
    if (r>n) throw "Error calling factorial(n.r) r must be less than n";
    return factorial(n)/(factorial(r)*factorial(n-r));
}

function numberOfPrimeCombinations(n){
    var total = 0;
    for(var i=1; i <= n ; i++){
        total+= countCombinations(n,i);
    }
    return total;
}

function getPrimeFactorization(num, primefacts){

    if(primefacts.length === 0) primefacts.push(1);

    for(var i=2; i <= num ;i++){
        if(num%i === 0) {
            primefacts.push(i);
            if(num/i > 1){
                getPrimeFactorization(num/i, primefacts);
            }
            break;
        }
    }
}

function getNumberOfDivisors(n){

    // reference to canonical prime factorization
    // and its relationship to the number of divisors
    // http://primes.utm.edu/glossary/xpage/tau.html


    var primes = [];  //this variable will contain the prime factorization of this functions input
    getPrimeFactorization(n,primes);


    var cpf = {}; // this variable will contain the canonical prime factorization aka cpf


    //This loop builds the cpf
    for(var i=0; i< primes.length;i++){

        var key = primes[i].toString();
        if(key === "1") continue; //we dont count 1 in the canonical factorization

        if(!cpf[key]){
            cpf[key] = 1;
        }
        else{
            cpf[key]++;
        }
    }

    //console.log(cpf);

    //this loop finishes by calculationg the number of divisors given the cpf
    var keys = Object.keys(cpf);
    var cnt=1;
    for(var j=0;j<keys.length;j++){
        cnt*=( cpf[keys[j]] +1);
    }

    //console.log(cnt);
    return cnt;
}

function getTriangleNumWithMoreThanNDivisors(n){

    var idx=0;

    do{
        idx++;
        var triangleNum = getTriangleNumberN(idx);
        var cnt = getNumberOfDivisors(triangleNum);
    }while(cnt < n);

    return triangleNum;
}

getTriangleNumWithMoreThanNDivisors(500);



